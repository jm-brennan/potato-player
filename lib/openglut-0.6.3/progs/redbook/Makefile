# Makefile.in generated by automake 1.9.2 from Makefile.am.
# progs/redbook/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



SOURCES = $(aaindex_SOURCES) $(aapoly_SOURCES) $(aargb_SOURCES) $(accanti_SOURCES) $(accpersp_SOURCES) $(alpha_SOURCES) $(alpha3D_SOURCES) $(anti_SOURCES) $(bezcurve_SOURCES) $(bezmesh_SOURCES) $(checker_SOURCES) $(clip_SOURCES) $(colormat_SOURCES) $(cube_SOURCES) $(depthcue_SOURCES) $(dof_SOURCES) $(double_SOURCES) $(drawf_SOURCES) $(feedback_SOURCES) $(fog_SOURCES) $(fogindex_SOURCES) $(font_SOURCES) $(hello_SOURCES) $(image_SOURCES) $(light_SOURCES) $(lines_SOURCES) $(list_SOURCES) $(material_SOURCES) $(mipmap_SOURCES) $(model_SOURCES) $(movelight_SOURCES) $(nurbs_SOURCES) $(pickdepth_SOURCES) $(picksquare_SOURCES) $(plane_SOURCES) $(planet_SOURCES) $(polyoff_SOURCES) $(polys_SOURCES) $(quadric_SOURCES) $(robot_SOURCES) $(sccolorlight_SOURCES) $(scene_SOURCES) $(scenebamb_SOURCES) $(sceneflat_SOURCES) $(select_SOURCES) $(smooth_SOURCES) $(stencil_SOURCES) $(stroke_SOURCES) $(surface_SOURCES) $(teaambient_SOURCES) $(teapots_SOURCES) $(tess_SOURCES) $(tesswind_SOURCES) $(texbind_SOURCES) $(texgen_SOURCES) $(texprox_SOURCES) $(texsub_SOURCES) $(texturesurf_SOURCES) $(torus_SOURCES) $(trim_SOURCES) $(unproject_SOURCES) $(varray_SOURCES) $(wrap_SOURCES)

srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/openglut
pkglibdir = $(libdir)/openglut
pkgincludedir = $(includedir)/openglut
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
noinst_PROGRAMS = aaindex$(EXEEXT) bezcurve$(EXEEXT) double$(EXEEXT) \
	light$(EXEEXT) pickdepth$(EXEEXT) sccolorlight$(EXEEXT) \
	surface$(EXEEXT) texsub$(EXEEXT) aapoly$(EXEEXT) \
	bezmesh$(EXEEXT) drawf$(EXEEXT) lines$(EXEEXT) \
	picksquare$(EXEEXT) scenebamb$(EXEEXT) teaambient$(EXEEXT) \
	texturesurf$(EXEEXT) aargb$(EXEEXT) checker$(EXEEXT) \
	feedback$(EXEEXT) list$(EXEEXT) plane$(EXEEXT) scene$(EXEEXT) \
	teapots$(EXEEXT) torus$(EXEEXT) accanti$(EXEEXT) clip$(EXEEXT) \
	fog$(EXEEXT) material$(EXEEXT) planet$(EXEEXT) \
	sceneflat$(EXEEXT) tess$(EXEEXT) trim$(EXEEXT) \
	accpersp$(EXEEXT) colormat$(EXEEXT) fogindex$(EXEEXT) \
	mipmap$(EXEEXT) polyoff$(EXEEXT) select$(EXEEXT) \
	tesswind$(EXEEXT) unproject$(EXEEXT) alpha3D$(EXEEXT) \
	cube$(EXEEXT) font$(EXEEXT) model$(EXEEXT) polys$(EXEEXT) \
	smooth$(EXEEXT) texbind$(EXEEXT) varray$(EXEEXT) \
	alpha$(EXEEXT) depthcue$(EXEEXT) hello$(EXEEXT) \
	movelight$(EXEEXT) quadric$(EXEEXT) stencil$(EXEEXT) \
	texgen$(EXEEXT) wrap$(EXEEXT) anti$(EXEEXT) dof$(EXEEXT) \
	image$(EXEEXT) nurbs$(EXEEXT) robot$(EXEEXT) stroke$(EXEEXT) \
	texprox$(EXEEXT)
subdir = progs/redbook
DIST_COMMON = README $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
PROGRAMS = $(noinst_PROGRAMS)
am_aaindex_OBJECTS = aaindex.$(OBJEXT)
aaindex_OBJECTS = $(am_aaindex_OBJECTS)
aaindex_LDADD = $(LDADD)
am_aapoly_OBJECTS = aapoly.$(OBJEXT)
aapoly_OBJECTS = $(am_aapoly_OBJECTS)
aapoly_LDADD = $(LDADD)
am_aargb_OBJECTS = aargb.$(OBJEXT)
aargb_OBJECTS = $(am_aargb_OBJECTS)
aargb_LDADD = $(LDADD)
am_accanti_OBJECTS = accanti.$(OBJEXT)
accanti_OBJECTS = $(am_accanti_OBJECTS)
accanti_LDADD = $(LDADD)
am_accpersp_OBJECTS = accpersp.$(OBJEXT)
accpersp_OBJECTS = $(am_accpersp_OBJECTS)
accpersp_LDADD = $(LDADD)
am_alpha_OBJECTS = alpha.$(OBJEXT)
alpha_OBJECTS = $(am_alpha_OBJECTS)
alpha_LDADD = $(LDADD)
am_alpha3D_OBJECTS = alpha3D.$(OBJEXT)
alpha3D_OBJECTS = $(am_alpha3D_OBJECTS)
alpha3D_LDADD = $(LDADD)
am_anti_OBJECTS = anti.$(OBJEXT)
anti_OBJECTS = $(am_anti_OBJECTS)
anti_LDADD = $(LDADD)
am_bezcurve_OBJECTS = bezcurve.$(OBJEXT)
bezcurve_OBJECTS = $(am_bezcurve_OBJECTS)
bezcurve_LDADD = $(LDADD)
am_bezmesh_OBJECTS = bezmesh.$(OBJEXT)
bezmesh_OBJECTS = $(am_bezmesh_OBJECTS)
bezmesh_LDADD = $(LDADD)
am_checker_OBJECTS = checker.$(OBJEXT)
checker_OBJECTS = $(am_checker_OBJECTS)
checker_LDADD = $(LDADD)
am_clip_OBJECTS = clip.$(OBJEXT)
clip_OBJECTS = $(am_clip_OBJECTS)
clip_LDADD = $(LDADD)
am_colormat_OBJECTS = colormat.$(OBJEXT)
colormat_OBJECTS = $(am_colormat_OBJECTS)
colormat_LDADD = $(LDADD)
am_cube_OBJECTS = cube.$(OBJEXT)
cube_OBJECTS = $(am_cube_OBJECTS)
cube_LDADD = $(LDADD)
am_depthcue_OBJECTS = depthcue.$(OBJEXT)
depthcue_OBJECTS = $(am_depthcue_OBJECTS)
depthcue_LDADD = $(LDADD)
am_dof_OBJECTS = dof.$(OBJEXT)
dof_OBJECTS = $(am_dof_OBJECTS)
dof_LDADD = $(LDADD)
am_double_OBJECTS = double.$(OBJEXT)
double_OBJECTS = $(am_double_OBJECTS)
double_LDADD = $(LDADD)
am_drawf_OBJECTS = drawf.$(OBJEXT)
drawf_OBJECTS = $(am_drawf_OBJECTS)
drawf_LDADD = $(LDADD)
am_feedback_OBJECTS = feedback.$(OBJEXT)
feedback_OBJECTS = $(am_feedback_OBJECTS)
feedback_LDADD = $(LDADD)
am_fog_OBJECTS = fog.$(OBJEXT)
fog_OBJECTS = $(am_fog_OBJECTS)
fog_LDADD = $(LDADD)
am_fogindex_OBJECTS = fogindex.$(OBJEXT)
fogindex_OBJECTS = $(am_fogindex_OBJECTS)
fogindex_LDADD = $(LDADD)
am_font_OBJECTS = font.$(OBJEXT)
font_OBJECTS = $(am_font_OBJECTS)
font_LDADD = $(LDADD)
am_hello_OBJECTS = hello.$(OBJEXT)
hello_OBJECTS = $(am_hello_OBJECTS)
hello_LDADD = $(LDADD)
am_image_OBJECTS = image.$(OBJEXT)
image_OBJECTS = $(am_image_OBJECTS)
image_LDADD = $(LDADD)
am_light_OBJECTS = light.$(OBJEXT)
light_OBJECTS = $(am_light_OBJECTS)
light_LDADD = $(LDADD)
am_lines_OBJECTS = lines.$(OBJEXT)
lines_OBJECTS = $(am_lines_OBJECTS)
lines_LDADD = $(LDADD)
am_list_OBJECTS = list.$(OBJEXT)
list_OBJECTS = $(am_list_OBJECTS)
list_LDADD = $(LDADD)
am_material_OBJECTS = material.$(OBJEXT)
material_OBJECTS = $(am_material_OBJECTS)
material_LDADD = $(LDADD)
am_mipmap_OBJECTS = mipmap.$(OBJEXT)
mipmap_OBJECTS = $(am_mipmap_OBJECTS)
mipmap_LDADD = $(LDADD)
am_model_OBJECTS = model.$(OBJEXT)
model_OBJECTS = $(am_model_OBJECTS)
model_LDADD = $(LDADD)
am_movelight_OBJECTS = movelight.$(OBJEXT)
movelight_OBJECTS = $(am_movelight_OBJECTS)
movelight_LDADD = $(LDADD)
am_nurbs_OBJECTS = nurbs.$(OBJEXT)
nurbs_OBJECTS = $(am_nurbs_OBJECTS)
nurbs_LDADD = $(LDADD)
am_pickdepth_OBJECTS = pickdepth.$(OBJEXT)
pickdepth_OBJECTS = $(am_pickdepth_OBJECTS)
pickdepth_LDADD = $(LDADD)
am_picksquare_OBJECTS = picksquare.$(OBJEXT)
picksquare_OBJECTS = $(am_picksquare_OBJECTS)
picksquare_LDADD = $(LDADD)
am_plane_OBJECTS = plane.$(OBJEXT)
plane_OBJECTS = $(am_plane_OBJECTS)
plane_LDADD = $(LDADD)
am_planet_OBJECTS = planet.$(OBJEXT)
planet_OBJECTS = $(am_planet_OBJECTS)
planet_LDADD = $(LDADD)
am_polyoff_OBJECTS = polyoff.$(OBJEXT)
polyoff_OBJECTS = $(am_polyoff_OBJECTS)
polyoff_LDADD = $(LDADD)
am_polys_OBJECTS = polys.$(OBJEXT)
polys_OBJECTS = $(am_polys_OBJECTS)
polys_LDADD = $(LDADD)
am_quadric_OBJECTS = quadric.$(OBJEXT)
quadric_OBJECTS = $(am_quadric_OBJECTS)
quadric_LDADD = $(LDADD)
am_robot_OBJECTS = robot.$(OBJEXT)
robot_OBJECTS = $(am_robot_OBJECTS)
robot_LDADD = $(LDADD)
am_sccolorlight_OBJECTS = sccolorlight.$(OBJEXT)
sccolorlight_OBJECTS = $(am_sccolorlight_OBJECTS)
sccolorlight_LDADD = $(LDADD)
am_scene_OBJECTS = scene.$(OBJEXT)
scene_OBJECTS = $(am_scene_OBJECTS)
scene_LDADD = $(LDADD)
am_scenebamb_OBJECTS = scenebamb.$(OBJEXT)
scenebamb_OBJECTS = $(am_scenebamb_OBJECTS)
scenebamb_LDADD = $(LDADD)
am_sceneflat_OBJECTS = sceneflat.$(OBJEXT)
sceneflat_OBJECTS = $(am_sceneflat_OBJECTS)
sceneflat_LDADD = $(LDADD)
am_select_OBJECTS = select.$(OBJEXT)
select_OBJECTS = $(am_select_OBJECTS)
select_LDADD = $(LDADD)
am_smooth_OBJECTS = smooth.$(OBJEXT)
smooth_OBJECTS = $(am_smooth_OBJECTS)
smooth_LDADD = $(LDADD)
am_stencil_OBJECTS = stencil.$(OBJEXT)
stencil_OBJECTS = $(am_stencil_OBJECTS)
stencil_LDADD = $(LDADD)
am_stroke_OBJECTS = stroke.$(OBJEXT)
stroke_OBJECTS = $(am_stroke_OBJECTS)
stroke_LDADD = $(LDADD)
am_surface_OBJECTS = surface.$(OBJEXT)
surface_OBJECTS = $(am_surface_OBJECTS)
surface_LDADD = $(LDADD)
am_teaambient_OBJECTS = teaambient.$(OBJEXT)
teaambient_OBJECTS = $(am_teaambient_OBJECTS)
teaambient_LDADD = $(LDADD)
am_teapots_OBJECTS = teapots.$(OBJEXT)
teapots_OBJECTS = $(am_teapots_OBJECTS)
teapots_LDADD = $(LDADD)
am_tess_OBJECTS = tess.$(OBJEXT)
tess_OBJECTS = $(am_tess_OBJECTS)
tess_LDADD = $(LDADD)
am_tesswind_OBJECTS = tesswind.$(OBJEXT)
tesswind_OBJECTS = $(am_tesswind_OBJECTS)
tesswind_LDADD = $(LDADD)
am_texbind_OBJECTS = texbind.$(OBJEXT)
texbind_OBJECTS = $(am_texbind_OBJECTS)
texbind_LDADD = $(LDADD)
am_texgen_OBJECTS = texgen.$(OBJEXT)
texgen_OBJECTS = $(am_texgen_OBJECTS)
texgen_LDADD = $(LDADD)
am_texprox_OBJECTS = texprox.$(OBJEXT)
texprox_OBJECTS = $(am_texprox_OBJECTS)
texprox_LDADD = $(LDADD)
am_texsub_OBJECTS = texsub.$(OBJEXT)
texsub_OBJECTS = $(am_texsub_OBJECTS)
texsub_LDADD = $(LDADD)
am_texturesurf_OBJECTS = texturesurf.$(OBJEXT)
texturesurf_OBJECTS = $(am_texturesurf_OBJECTS)
texturesurf_LDADD = $(LDADD)
am_torus_OBJECTS = torus.$(OBJEXT)
torus_OBJECTS = $(am_torus_OBJECTS)
torus_LDADD = $(LDADD)
am_trim_OBJECTS = trim.$(OBJEXT)
trim_OBJECTS = $(am_trim_OBJECTS)
trim_LDADD = $(LDADD)
am_unproject_OBJECTS = unproject.$(OBJEXT)
unproject_OBJECTS = $(am_unproject_OBJECTS)
unproject_LDADD = $(LDADD)
am_varray_OBJECTS = varray.$(OBJEXT)
varray_OBJECTS = $(am_varray_OBJECTS)
varray_LDADD = $(LDADD)
am_wrap_OBJECTS = wrap.$(OBJEXT)
wrap_OBJECTS = $(am_wrap_OBJECTS)
wrap_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile --tag=CC $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link --tag=CC $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(aaindex_SOURCES) $(aapoly_SOURCES) $(aargb_SOURCES) \
	$(accanti_SOURCES) $(accpersp_SOURCES) $(alpha_SOURCES) \
	$(alpha3D_SOURCES) $(anti_SOURCES) $(bezcurve_SOURCES) \
	$(bezmesh_SOURCES) $(checker_SOURCES) $(clip_SOURCES) \
	$(colormat_SOURCES) $(cube_SOURCES) $(depthcue_SOURCES) \
	$(dof_SOURCES) $(double_SOURCES) $(drawf_SOURCES) \
	$(feedback_SOURCES) $(fog_SOURCES) $(fogindex_SOURCES) \
	$(font_SOURCES) $(hello_SOURCES) $(image_SOURCES) \
	$(light_SOURCES) $(lines_SOURCES) $(list_SOURCES) \
	$(material_SOURCES) $(mipmap_SOURCES) $(model_SOURCES) \
	$(movelight_SOURCES) $(nurbs_SOURCES) $(pickdepth_SOURCES) \
	$(picksquare_SOURCES) $(plane_SOURCES) $(planet_SOURCES) \
	$(polyoff_SOURCES) $(polys_SOURCES) $(quadric_SOURCES) \
	$(robot_SOURCES) $(sccolorlight_SOURCES) $(scene_SOURCES) \
	$(scenebamb_SOURCES) $(sceneflat_SOURCES) $(select_SOURCES) \
	$(smooth_SOURCES) $(stencil_SOURCES) $(stroke_SOURCES) \
	$(surface_SOURCES) $(teaambient_SOURCES) $(teapots_SOURCES) \
	$(tess_SOURCES) $(tesswind_SOURCES) $(texbind_SOURCES) \
	$(texgen_SOURCES) $(texprox_SOURCES) $(texsub_SOURCES) \
	$(texturesurf_SOURCES) $(torus_SOURCES) $(trim_SOURCES) \
	$(unproject_SOURCES) $(varray_SOURCES) $(wrap_SOURCES)
DIST_SOURCES = $(aaindex_SOURCES) $(aapoly_SOURCES) $(aargb_SOURCES) \
	$(accanti_SOURCES) $(accpersp_SOURCES) $(alpha_SOURCES) \
	$(alpha3D_SOURCES) $(anti_SOURCES) $(bezcurve_SOURCES) \
	$(bezmesh_SOURCES) $(checker_SOURCES) $(clip_SOURCES) \
	$(colormat_SOURCES) $(cube_SOURCES) $(depthcue_SOURCES) \
	$(dof_SOURCES) $(double_SOURCES) $(drawf_SOURCES) \
	$(feedback_SOURCES) $(fog_SOURCES) $(fogindex_SOURCES) \
	$(font_SOURCES) $(hello_SOURCES) $(image_SOURCES) \
	$(light_SOURCES) $(lines_SOURCES) $(list_SOURCES) \
	$(material_SOURCES) $(mipmap_SOURCES) $(model_SOURCES) \
	$(movelight_SOURCES) $(nurbs_SOURCES) $(pickdepth_SOURCES) \
	$(picksquare_SOURCES) $(plane_SOURCES) $(planet_SOURCES) \
	$(polyoff_SOURCES) $(polys_SOURCES) $(quadric_SOURCES) \
	$(robot_SOURCES) $(sccolorlight_SOURCES) $(scene_SOURCES) \
	$(scenebamb_SOURCES) $(sceneflat_SOURCES) $(select_SOURCES) \
	$(smooth_SOURCES) $(stencil_SOURCES) $(stroke_SOURCES) \
	$(surface_SOURCES) $(teaambient_SOURCES) $(teapots_SOURCES) \
	$(tess_SOURCES) $(tesswind_SOURCES) $(texbind_SOURCES) \
	$(texgen_SOURCES) $(texprox_SOURCES) $(texsub_SOURCES) \
	$(texturesurf_SOURCES) $(torus_SOURCES) $(trim_SOURCES) \
	$(unproject_SOURCES) $(varray_SOURCES) $(wrap_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/jacob/src/potato-player/lib/openglut-0.6.3/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/jacob/src/potato-player/lib/openglut-0.6.3/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/jacob/src/potato-player/lib/openglut-0.6.3/missing --run autoconf
AUTOHEADER = ${SHELL} /home/jacob/src/potato-player/lib/openglut-0.6.3/missing --run autoheader
AUTOMAKE = ${SHELL} /home/jacob/src/potato-player/lib/openglut-0.6.3/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3

# Must NOT override LDFLAGS, since it is a user variable,
# and some systems need to modify it.  Presently, the ugly
# hack to work around this is to specify a per-file LDFLAGS.
# For some reason, AM_LDFLAGS does not work on LINUX.
#
# MUST override CFLAGS, since the user may have specified
# -Wall -Werror, which will cause problems with one of the
# demos.  (The -Wall -Werror condition is the error checking
# that OpenGLUT enables.  See --disable-warnings and
# --enable-warnings.)
#
#LDFLAGS = ../../src/libopenglut.la
CFLAGS = $(X_CFLAGS)
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = gfortran
FFLAGS = -g -O2
HEADER = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBM = -lm
LIBOBJS = 
LIBRARY = openglut
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBTOOL_DEPS = ./ltmain.sh
LIBXXF86VM = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/jacob/src/potato-player/lib/openglut-0.6.3/missing --run makeinfo
OBJEXT = o
OG_EXTRA_BUILD = 
PACKAGE = openglut
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 0.6.3
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS = 
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = gfortran
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/jacob/src/potato-player/lib/openglut-0.6.3/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
EXTRA_DIST = \
	aaindex.c bezcurve.c double.c light.c pickdepth.c sccolorlight.c surface.c \
	texsub.c aapoly.c bezmesh.c drawf.c lines.c picksquare.c scenebamb.c teaambient.c texturesurf.c \
	aargb.c checker.c feedback.c list.c plane.c scene.c teapots.c torus.c \
	accanti.c clip.c fog.c material.c planet.c sceneflat.c tess.c trim.c \
	accpersp.c colormat.c fogindex.c mipmap.c polyoff.c select.c tesswind.c unproject.c \
	alpha3D.c cube.c font.c model.c polys.c smooth.c texbind.c varray.c \
	alpha.c depthcue.c hello.c movelight.c quadric.c stencil.c texgen.c wrap.c \
	anti.c dof.c image.c nurbs.c robot.c stroke.c texprox.c \
	jitter.h

INCLUDES = -I$(top_srcdir)/include
aaindex_SOURCES = aaindex.c
aaindex_LDFLAGS = ../../src/libopenglut.la
bezcurve_SOURCES = bezcurve.c
bezcurve_LDFLAGS = ../../src/libopenglut.la
double_SOURCES = double.c
double_LDFLAGS = ../../src/libopenglut.la
light_SOURCES = light.c
light_LDFLAGS = ../../src/libopenglut.la
pickdepth_SOURCES = pickdepth.c
pickdepth_LDFLAGS = ../../src/libopenglut.la
sccolorlight_SOURCES = sccolorlight.c
sccolorlight_LDFLAGS = ../../src/libopenglut.la
surface_SOURCES = surface.c
surface_LDFLAGS = ../../src/libopenglut.la
texsub_SOURCES = texsub.c
texsub_LDFLAGS = ../../src/libopenglut.la
aapoly_SOURCES = aapoly.c
aapoly_LDFLAGS = ../../src/libopenglut.la
bezmesh_SOURCES = bezmesh.c
bezmesh_LDFLAGS = ../../src/libopenglut.la
drawf_SOURCES = drawf.c
drawf_LDFLAGS = ../../src/libopenglut.la
lines_SOURCES = lines.c
lines_LDFLAGS = ../../src/libopenglut.la
picksquare_SOURCES = picksquare.c
picksquare_LDFLAGS = ../../src/libopenglut.la
scenebamb_SOURCES = scenebamb.c
scenebamb_LDFLAGS = ../../src/libopenglut.la
teaambient_SOURCES = teaambient.c
teaambient_LDFLAGS = ../../src/libopenglut.la
texturesurf_SOURCES = texturesurf.c
texturesurf_LDFLAGS = ../../src/libopenglut.la
aargb_SOURCES = aargb.c
aargb_LDFLAGS = ../../src/libopenglut.la
checker_SOURCES = checker.c
checker_LDFLAGS = ../../src/libopenglut.la
feedback_SOURCES = feedback.c
feedback_LDFLAGS = ../../src/libopenglut.la
list_SOURCES = list.c
list_LDFLAGS = ../../src/libopenglut.la
plane_SOURCES = plane.c
plane_LDFLAGS = ../../src/libopenglut.la
scene_SOURCES = scene.c
scene_LDFLAGS = ../../src/libopenglut.la
teapots_SOURCES = teapots.c
teapots_LDFLAGS = ../../src/libopenglut.la
torus_SOURCES = torus.c
torus_LDFLAGS = ../../src/libopenglut.la
accanti_SOURCES = accanti.c
accanti_LDFLAGS = ../../src/libopenglut.la
clip_SOURCES = clip.c
clip_LDFLAGS = ../../src/libopenglut.la
fog_SOURCES = fog.c
fog_LDFLAGS = ../../src/libopenglut.la
material_SOURCES = material.c
material_LDFLAGS = ../../src/libopenglut.la
planet_SOURCES = planet.c
planet_LDFLAGS = ../../src/libopenglut.la
sceneflat_SOURCES = sceneflat.c
sceneflat_LDFLAGS = ../../src/libopenglut.la
tess_SOURCES = tess.c
tess_LDFLAGS = ../../src/libopenglut.la
trim_SOURCES = trim.c
trim_LDFLAGS = ../../src/libopenglut.la
accpersp_SOURCES = accpersp.c
accpersp_LDFLAGS = ../../src/libopenglut.la
colormat_SOURCES = colormat.c
colormat_LDFLAGS = ../../src/libopenglut.la
fogindex_SOURCES = fogindex.c
fogindex_LDFLAGS = ../../src/libopenglut.la
mipmap_SOURCES = mipmap.c
mipmap_LDFLAGS = ../../src/libopenglut.la
polyoff_SOURCES = polyoff.c
polyoff_LDFLAGS = ../../src/libopenglut.la
select_SOURCES = select.c
select_LDFLAGS = ../../src/libopenglut.la
tesswind_SOURCES = tesswind.c
tesswind_LDFLAGS = ../../src/libopenglut.la
unproject_SOURCES = unproject.c
unproject_LDFLAGS = ../../src/libopenglut.la
alpha3D_SOURCES = alpha3D.c
alpha3D_LDFLAGS = ../../src/libopenglut.la
cube_SOURCES = cube.c
cube_LDFLAGS = ../../src/libopenglut.la
font_SOURCES = font.c
font_LDFLAGS = ../../src/libopenglut.la
model_SOURCES = model.c
model_LDFLAGS = ../../src/libopenglut.la
polys_SOURCES = polys.c
polys_LDFLAGS = ../../src/libopenglut.la
smooth_SOURCES = smooth.c
smooth_LDFLAGS = ../../src/libopenglut.la
texbind_SOURCES = texbind.c
texbind_LDFLAGS = ../../src/libopenglut.la
varray_SOURCES = varray.c
varray_LDFLAGS = ../../src/libopenglut.la
alpha_SOURCES = alpha.c
alpha_LDFLAGS = ../../src/libopenglut.la
depthcue_SOURCES = depthcue.c
depthcue_LDFLAGS = ../../src/libopenglut.la
hello_SOURCES = hello.c
hello_LDFLAGS = ../../src/libopenglut.la
movelight_SOURCES = movelight.c
movelight_LDFLAGS = ../../src/libopenglut.la
quadric_SOURCES = quadric.c
quadric_LDFLAGS = ../../src/libopenglut.la
stencil_SOURCES = stencil.c
stencil_LDFLAGS = ../../src/libopenglut.la
texgen_SOURCES = texgen.c
texgen_LDFLAGS = ../../src/libopenglut.la
wrap_SOURCES = wrap.c
wrap_LDFLAGS = ../../src/libopenglut.la
anti_SOURCES = anti.c
anti_LDFLAGS = ../../src/libopenglut.la
dof_SOURCES = dof.c
dof_LDFLAGS = ../../src/libopenglut.la
image_SOURCES = image.c
image_LDFLAGS = ../../src/libopenglut.la
nurbs_SOURCES = nurbs.c
nurbs_LDFLAGS = ../../src/libopenglut.la
robot_SOURCES = robot.c
robot_LDFLAGS = ../../src/libopenglut.la
stroke_SOURCES = stroke.c
stroke_LDFLAGS = ../../src/libopenglut.la
texprox_SOURCES = texprox.c
texprox_LDFLAGS = ../../src/libopenglut.la
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  progs/redbook/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  progs/redbook/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
aaindex$(EXEEXT): $(aaindex_OBJECTS) $(aaindex_DEPENDENCIES) 
	@rm -f aaindex$(EXEEXT)
	$(LINK) $(aaindex_LDFLAGS) $(aaindex_OBJECTS) $(aaindex_LDADD) $(LIBS)
aapoly$(EXEEXT): $(aapoly_OBJECTS) $(aapoly_DEPENDENCIES) 
	@rm -f aapoly$(EXEEXT)
	$(LINK) $(aapoly_LDFLAGS) $(aapoly_OBJECTS) $(aapoly_LDADD) $(LIBS)
aargb$(EXEEXT): $(aargb_OBJECTS) $(aargb_DEPENDENCIES) 
	@rm -f aargb$(EXEEXT)
	$(LINK) $(aargb_LDFLAGS) $(aargb_OBJECTS) $(aargb_LDADD) $(LIBS)
accanti$(EXEEXT): $(accanti_OBJECTS) $(accanti_DEPENDENCIES) 
	@rm -f accanti$(EXEEXT)
	$(LINK) $(accanti_LDFLAGS) $(accanti_OBJECTS) $(accanti_LDADD) $(LIBS)
accpersp$(EXEEXT): $(accpersp_OBJECTS) $(accpersp_DEPENDENCIES) 
	@rm -f accpersp$(EXEEXT)
	$(LINK) $(accpersp_LDFLAGS) $(accpersp_OBJECTS) $(accpersp_LDADD) $(LIBS)
alpha$(EXEEXT): $(alpha_OBJECTS) $(alpha_DEPENDENCIES) 
	@rm -f alpha$(EXEEXT)
	$(LINK) $(alpha_LDFLAGS) $(alpha_OBJECTS) $(alpha_LDADD) $(LIBS)
alpha3D$(EXEEXT): $(alpha3D_OBJECTS) $(alpha3D_DEPENDENCIES) 
	@rm -f alpha3D$(EXEEXT)
	$(LINK) $(alpha3D_LDFLAGS) $(alpha3D_OBJECTS) $(alpha3D_LDADD) $(LIBS)
anti$(EXEEXT): $(anti_OBJECTS) $(anti_DEPENDENCIES) 
	@rm -f anti$(EXEEXT)
	$(LINK) $(anti_LDFLAGS) $(anti_OBJECTS) $(anti_LDADD) $(LIBS)
bezcurve$(EXEEXT): $(bezcurve_OBJECTS) $(bezcurve_DEPENDENCIES) 
	@rm -f bezcurve$(EXEEXT)
	$(LINK) $(bezcurve_LDFLAGS) $(bezcurve_OBJECTS) $(bezcurve_LDADD) $(LIBS)
bezmesh$(EXEEXT): $(bezmesh_OBJECTS) $(bezmesh_DEPENDENCIES) 
	@rm -f bezmesh$(EXEEXT)
	$(LINK) $(bezmesh_LDFLAGS) $(bezmesh_OBJECTS) $(bezmesh_LDADD) $(LIBS)
checker$(EXEEXT): $(checker_OBJECTS) $(checker_DEPENDENCIES) 
	@rm -f checker$(EXEEXT)
	$(LINK) $(checker_LDFLAGS) $(checker_OBJECTS) $(checker_LDADD) $(LIBS)
clip$(EXEEXT): $(clip_OBJECTS) $(clip_DEPENDENCIES) 
	@rm -f clip$(EXEEXT)
	$(LINK) $(clip_LDFLAGS) $(clip_OBJECTS) $(clip_LDADD) $(LIBS)
colormat$(EXEEXT): $(colormat_OBJECTS) $(colormat_DEPENDENCIES) 
	@rm -f colormat$(EXEEXT)
	$(LINK) $(colormat_LDFLAGS) $(colormat_OBJECTS) $(colormat_LDADD) $(LIBS)
cube$(EXEEXT): $(cube_OBJECTS) $(cube_DEPENDENCIES) 
	@rm -f cube$(EXEEXT)
	$(LINK) $(cube_LDFLAGS) $(cube_OBJECTS) $(cube_LDADD) $(LIBS)
depthcue$(EXEEXT): $(depthcue_OBJECTS) $(depthcue_DEPENDENCIES) 
	@rm -f depthcue$(EXEEXT)
	$(LINK) $(depthcue_LDFLAGS) $(depthcue_OBJECTS) $(depthcue_LDADD) $(LIBS)
dof$(EXEEXT): $(dof_OBJECTS) $(dof_DEPENDENCIES) 
	@rm -f dof$(EXEEXT)
	$(LINK) $(dof_LDFLAGS) $(dof_OBJECTS) $(dof_LDADD) $(LIBS)
double$(EXEEXT): $(double_OBJECTS) $(double_DEPENDENCIES) 
	@rm -f double$(EXEEXT)
	$(LINK) $(double_LDFLAGS) $(double_OBJECTS) $(double_LDADD) $(LIBS)
drawf$(EXEEXT): $(drawf_OBJECTS) $(drawf_DEPENDENCIES) 
	@rm -f drawf$(EXEEXT)
	$(LINK) $(drawf_LDFLAGS) $(drawf_OBJECTS) $(drawf_LDADD) $(LIBS)
feedback$(EXEEXT): $(feedback_OBJECTS) $(feedback_DEPENDENCIES) 
	@rm -f feedback$(EXEEXT)
	$(LINK) $(feedback_LDFLAGS) $(feedback_OBJECTS) $(feedback_LDADD) $(LIBS)
fog$(EXEEXT): $(fog_OBJECTS) $(fog_DEPENDENCIES) 
	@rm -f fog$(EXEEXT)
	$(LINK) $(fog_LDFLAGS) $(fog_OBJECTS) $(fog_LDADD) $(LIBS)
fogindex$(EXEEXT): $(fogindex_OBJECTS) $(fogindex_DEPENDENCIES) 
	@rm -f fogindex$(EXEEXT)
	$(LINK) $(fogindex_LDFLAGS) $(fogindex_OBJECTS) $(fogindex_LDADD) $(LIBS)
font$(EXEEXT): $(font_OBJECTS) $(font_DEPENDENCIES) 
	@rm -f font$(EXEEXT)
	$(LINK) $(font_LDFLAGS) $(font_OBJECTS) $(font_LDADD) $(LIBS)
hello$(EXEEXT): $(hello_OBJECTS) $(hello_DEPENDENCIES) 
	@rm -f hello$(EXEEXT)
	$(LINK) $(hello_LDFLAGS) $(hello_OBJECTS) $(hello_LDADD) $(LIBS)
image$(EXEEXT): $(image_OBJECTS) $(image_DEPENDENCIES) 
	@rm -f image$(EXEEXT)
	$(LINK) $(image_LDFLAGS) $(image_OBJECTS) $(image_LDADD) $(LIBS)
light$(EXEEXT): $(light_OBJECTS) $(light_DEPENDENCIES) 
	@rm -f light$(EXEEXT)
	$(LINK) $(light_LDFLAGS) $(light_OBJECTS) $(light_LDADD) $(LIBS)
lines$(EXEEXT): $(lines_OBJECTS) $(lines_DEPENDENCIES) 
	@rm -f lines$(EXEEXT)
	$(LINK) $(lines_LDFLAGS) $(lines_OBJECTS) $(lines_LDADD) $(LIBS)
list$(EXEEXT): $(list_OBJECTS) $(list_DEPENDENCIES) 
	@rm -f list$(EXEEXT)
	$(LINK) $(list_LDFLAGS) $(list_OBJECTS) $(list_LDADD) $(LIBS)
material$(EXEEXT): $(material_OBJECTS) $(material_DEPENDENCIES) 
	@rm -f material$(EXEEXT)
	$(LINK) $(material_LDFLAGS) $(material_OBJECTS) $(material_LDADD) $(LIBS)
mipmap$(EXEEXT): $(mipmap_OBJECTS) $(mipmap_DEPENDENCIES) 
	@rm -f mipmap$(EXEEXT)
	$(LINK) $(mipmap_LDFLAGS) $(mipmap_OBJECTS) $(mipmap_LDADD) $(LIBS)
model$(EXEEXT): $(model_OBJECTS) $(model_DEPENDENCIES) 
	@rm -f model$(EXEEXT)
	$(LINK) $(model_LDFLAGS) $(model_OBJECTS) $(model_LDADD) $(LIBS)
movelight$(EXEEXT): $(movelight_OBJECTS) $(movelight_DEPENDENCIES) 
	@rm -f movelight$(EXEEXT)
	$(LINK) $(movelight_LDFLAGS) $(movelight_OBJECTS) $(movelight_LDADD) $(LIBS)
nurbs$(EXEEXT): $(nurbs_OBJECTS) $(nurbs_DEPENDENCIES) 
	@rm -f nurbs$(EXEEXT)
	$(LINK) $(nurbs_LDFLAGS) $(nurbs_OBJECTS) $(nurbs_LDADD) $(LIBS)
pickdepth$(EXEEXT): $(pickdepth_OBJECTS) $(pickdepth_DEPENDENCIES) 
	@rm -f pickdepth$(EXEEXT)
	$(LINK) $(pickdepth_LDFLAGS) $(pickdepth_OBJECTS) $(pickdepth_LDADD) $(LIBS)
picksquare$(EXEEXT): $(picksquare_OBJECTS) $(picksquare_DEPENDENCIES) 
	@rm -f picksquare$(EXEEXT)
	$(LINK) $(picksquare_LDFLAGS) $(picksquare_OBJECTS) $(picksquare_LDADD) $(LIBS)
plane$(EXEEXT): $(plane_OBJECTS) $(plane_DEPENDENCIES) 
	@rm -f plane$(EXEEXT)
	$(LINK) $(plane_LDFLAGS) $(plane_OBJECTS) $(plane_LDADD) $(LIBS)
planet$(EXEEXT): $(planet_OBJECTS) $(planet_DEPENDENCIES) 
	@rm -f planet$(EXEEXT)
	$(LINK) $(planet_LDFLAGS) $(planet_OBJECTS) $(planet_LDADD) $(LIBS)
polyoff$(EXEEXT): $(polyoff_OBJECTS) $(polyoff_DEPENDENCIES) 
	@rm -f polyoff$(EXEEXT)
	$(LINK) $(polyoff_LDFLAGS) $(polyoff_OBJECTS) $(polyoff_LDADD) $(LIBS)
polys$(EXEEXT): $(polys_OBJECTS) $(polys_DEPENDENCIES) 
	@rm -f polys$(EXEEXT)
	$(LINK) $(polys_LDFLAGS) $(polys_OBJECTS) $(polys_LDADD) $(LIBS)
quadric$(EXEEXT): $(quadric_OBJECTS) $(quadric_DEPENDENCIES) 
	@rm -f quadric$(EXEEXT)
	$(LINK) $(quadric_LDFLAGS) $(quadric_OBJECTS) $(quadric_LDADD) $(LIBS)
robot$(EXEEXT): $(robot_OBJECTS) $(robot_DEPENDENCIES) 
	@rm -f robot$(EXEEXT)
	$(LINK) $(robot_LDFLAGS) $(robot_OBJECTS) $(robot_LDADD) $(LIBS)
sccolorlight$(EXEEXT): $(sccolorlight_OBJECTS) $(sccolorlight_DEPENDENCIES) 
	@rm -f sccolorlight$(EXEEXT)
	$(LINK) $(sccolorlight_LDFLAGS) $(sccolorlight_OBJECTS) $(sccolorlight_LDADD) $(LIBS)
scene$(EXEEXT): $(scene_OBJECTS) $(scene_DEPENDENCIES) 
	@rm -f scene$(EXEEXT)
	$(LINK) $(scene_LDFLAGS) $(scene_OBJECTS) $(scene_LDADD) $(LIBS)
scenebamb$(EXEEXT): $(scenebamb_OBJECTS) $(scenebamb_DEPENDENCIES) 
	@rm -f scenebamb$(EXEEXT)
	$(LINK) $(scenebamb_LDFLAGS) $(scenebamb_OBJECTS) $(scenebamb_LDADD) $(LIBS)
sceneflat$(EXEEXT): $(sceneflat_OBJECTS) $(sceneflat_DEPENDENCIES) 
	@rm -f sceneflat$(EXEEXT)
	$(LINK) $(sceneflat_LDFLAGS) $(sceneflat_OBJECTS) $(sceneflat_LDADD) $(LIBS)
select$(EXEEXT): $(select_OBJECTS) $(select_DEPENDENCIES) 
	@rm -f select$(EXEEXT)
	$(LINK) $(select_LDFLAGS) $(select_OBJECTS) $(select_LDADD) $(LIBS)
smooth$(EXEEXT): $(smooth_OBJECTS) $(smooth_DEPENDENCIES) 
	@rm -f smooth$(EXEEXT)
	$(LINK) $(smooth_LDFLAGS) $(smooth_OBJECTS) $(smooth_LDADD) $(LIBS)
stencil$(EXEEXT): $(stencil_OBJECTS) $(stencil_DEPENDENCIES) 
	@rm -f stencil$(EXEEXT)
	$(LINK) $(stencil_LDFLAGS) $(stencil_OBJECTS) $(stencil_LDADD) $(LIBS)
stroke$(EXEEXT): $(stroke_OBJECTS) $(stroke_DEPENDENCIES) 
	@rm -f stroke$(EXEEXT)
	$(LINK) $(stroke_LDFLAGS) $(stroke_OBJECTS) $(stroke_LDADD) $(LIBS)
surface$(EXEEXT): $(surface_OBJECTS) $(surface_DEPENDENCIES) 
	@rm -f surface$(EXEEXT)
	$(LINK) $(surface_LDFLAGS) $(surface_OBJECTS) $(surface_LDADD) $(LIBS)
teaambient$(EXEEXT): $(teaambient_OBJECTS) $(teaambient_DEPENDENCIES) 
	@rm -f teaambient$(EXEEXT)
	$(LINK) $(teaambient_LDFLAGS) $(teaambient_OBJECTS) $(teaambient_LDADD) $(LIBS)
teapots$(EXEEXT): $(teapots_OBJECTS) $(teapots_DEPENDENCIES) 
	@rm -f teapots$(EXEEXT)
	$(LINK) $(teapots_LDFLAGS) $(teapots_OBJECTS) $(teapots_LDADD) $(LIBS)
tess$(EXEEXT): $(tess_OBJECTS) $(tess_DEPENDENCIES) 
	@rm -f tess$(EXEEXT)
	$(LINK) $(tess_LDFLAGS) $(tess_OBJECTS) $(tess_LDADD) $(LIBS)
tesswind$(EXEEXT): $(tesswind_OBJECTS) $(tesswind_DEPENDENCIES) 
	@rm -f tesswind$(EXEEXT)
	$(LINK) $(tesswind_LDFLAGS) $(tesswind_OBJECTS) $(tesswind_LDADD) $(LIBS)
texbind$(EXEEXT): $(texbind_OBJECTS) $(texbind_DEPENDENCIES) 
	@rm -f texbind$(EXEEXT)
	$(LINK) $(texbind_LDFLAGS) $(texbind_OBJECTS) $(texbind_LDADD) $(LIBS)
texgen$(EXEEXT): $(texgen_OBJECTS) $(texgen_DEPENDENCIES) 
	@rm -f texgen$(EXEEXT)
	$(LINK) $(texgen_LDFLAGS) $(texgen_OBJECTS) $(texgen_LDADD) $(LIBS)
texprox$(EXEEXT): $(texprox_OBJECTS) $(texprox_DEPENDENCIES) 
	@rm -f texprox$(EXEEXT)
	$(LINK) $(texprox_LDFLAGS) $(texprox_OBJECTS) $(texprox_LDADD) $(LIBS)
texsub$(EXEEXT): $(texsub_OBJECTS) $(texsub_DEPENDENCIES) 
	@rm -f texsub$(EXEEXT)
	$(LINK) $(texsub_LDFLAGS) $(texsub_OBJECTS) $(texsub_LDADD) $(LIBS)
texturesurf$(EXEEXT): $(texturesurf_OBJECTS) $(texturesurf_DEPENDENCIES) 
	@rm -f texturesurf$(EXEEXT)
	$(LINK) $(texturesurf_LDFLAGS) $(texturesurf_OBJECTS) $(texturesurf_LDADD) $(LIBS)
torus$(EXEEXT): $(torus_OBJECTS) $(torus_DEPENDENCIES) 
	@rm -f torus$(EXEEXT)
	$(LINK) $(torus_LDFLAGS) $(torus_OBJECTS) $(torus_LDADD) $(LIBS)
trim$(EXEEXT): $(trim_OBJECTS) $(trim_DEPENDENCIES) 
	@rm -f trim$(EXEEXT)
	$(LINK) $(trim_LDFLAGS) $(trim_OBJECTS) $(trim_LDADD) $(LIBS)
unproject$(EXEEXT): $(unproject_OBJECTS) $(unproject_DEPENDENCIES) 
	@rm -f unproject$(EXEEXT)
	$(LINK) $(unproject_LDFLAGS) $(unproject_OBJECTS) $(unproject_LDADD) $(LIBS)
varray$(EXEEXT): $(varray_OBJECTS) $(varray_DEPENDENCIES) 
	@rm -f varray$(EXEEXT)
	$(LINK) $(varray_LDFLAGS) $(varray_OBJECTS) $(varray_LDADD) $(LIBS)
wrap$(EXEEXT): $(wrap_OBJECTS) $(wrap_DEPENDENCIES) 
	@rm -f wrap$(EXEEXT)
	$(LINK) $(wrap_LDFLAGS) $(wrap_OBJECTS) $(wrap_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/aaindex.Po
include ./$(DEPDIR)/aapoly.Po
include ./$(DEPDIR)/aargb.Po
include ./$(DEPDIR)/accanti.Po
include ./$(DEPDIR)/accpersp.Po
include ./$(DEPDIR)/alpha.Po
include ./$(DEPDIR)/alpha3D.Po
include ./$(DEPDIR)/anti.Po
include ./$(DEPDIR)/bezcurve.Po
include ./$(DEPDIR)/bezmesh.Po
include ./$(DEPDIR)/checker.Po
include ./$(DEPDIR)/clip.Po
include ./$(DEPDIR)/colormat.Po
include ./$(DEPDIR)/cube.Po
include ./$(DEPDIR)/depthcue.Po
include ./$(DEPDIR)/dof.Po
include ./$(DEPDIR)/double.Po
include ./$(DEPDIR)/drawf.Po
include ./$(DEPDIR)/feedback.Po
include ./$(DEPDIR)/fog.Po
include ./$(DEPDIR)/fogindex.Po
include ./$(DEPDIR)/font.Po
include ./$(DEPDIR)/hello.Po
include ./$(DEPDIR)/image.Po
include ./$(DEPDIR)/light.Po
include ./$(DEPDIR)/lines.Po
include ./$(DEPDIR)/list.Po
include ./$(DEPDIR)/material.Po
include ./$(DEPDIR)/mipmap.Po
include ./$(DEPDIR)/model.Po
include ./$(DEPDIR)/movelight.Po
include ./$(DEPDIR)/nurbs.Po
include ./$(DEPDIR)/pickdepth.Po
include ./$(DEPDIR)/picksquare.Po
include ./$(DEPDIR)/plane.Po
include ./$(DEPDIR)/planet.Po
include ./$(DEPDIR)/polyoff.Po
include ./$(DEPDIR)/polys.Po
include ./$(DEPDIR)/quadric.Po
include ./$(DEPDIR)/robot.Po
include ./$(DEPDIR)/sccolorlight.Po
include ./$(DEPDIR)/scene.Po
include ./$(DEPDIR)/scenebamb.Po
include ./$(DEPDIR)/sceneflat.Po
include ./$(DEPDIR)/select.Po
include ./$(DEPDIR)/smooth.Po
include ./$(DEPDIR)/stencil.Po
include ./$(DEPDIR)/stroke.Po
include ./$(DEPDIR)/surface.Po
include ./$(DEPDIR)/teaambient.Po
include ./$(DEPDIR)/teapots.Po
include ./$(DEPDIR)/tess.Po
include ./$(DEPDIR)/tesswind.Po
include ./$(DEPDIR)/texbind.Po
include ./$(DEPDIR)/texgen.Po
include ./$(DEPDIR)/texprox.Po
include ./$(DEPDIR)/texsub.Po
include ./$(DEPDIR)/texturesurf.Po
include ./$(DEPDIR)/torus.Po
include ./$(DEPDIR)/trim.Po
include ./$(DEPDIR)/unproject.Po
include ./$(DEPDIR)/varray.Po
include ./$(DEPDIR)/wrap.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
